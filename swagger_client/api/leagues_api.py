# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LeaguesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_builder_base_league(self, league_id, **kwargs):  # noqa: E501
        """Get Builder Base league information  # noqa: E501

        Get Builder Base league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builder_base_league(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: BuilderBaseLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_builder_base_league_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_builder_base_league_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def get_builder_base_league_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get Builder Base league information  # noqa: E501

        Get Builder Base league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builder_base_league_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: BuilderBaseLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_builder_base_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_builder_base_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/builderbaseleagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuilderBaseLeague',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_builder_base_leagues(self, **kwargs):  # noqa: E501
        """List Builder Base leagues  # noqa: E501

        List Builder Base leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builder_base_leagues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: BuilderBaseLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_builder_base_leagues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_builder_base_leagues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_builder_base_leagues_with_http_info(self, **kwargs):  # noqa: E501
        """List Builder Base leagues  # noqa: E501

        List Builder Base leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builder_base_leagues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: BuilderBaseLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_builder_base_leagues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/builderbaseleagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuilderBaseLeagueList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_capital_league(self, league_id, **kwargs):  # noqa: E501
        """Get capital league information  # noqa: E501

        Get capital league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capital_league(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: CapitalLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_capital_league_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_capital_league_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def get_capital_league_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get capital league information  # noqa: E501

        Get capital league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capital_league_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: CapitalLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capital_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_capital_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/capitalleagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CapitalLeague',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_capital_leagues(self, **kwargs):  # noqa: E501
        """List capital leagues  # noqa: E501

        List capital leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capital_leagues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: CapitalLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_capital_leagues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_capital_leagues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_capital_leagues_with_http_info(self, **kwargs):  # noqa: E501
        """List capital leagues  # noqa: E501

        List capital leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capital_leagues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: CapitalLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capital_leagues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/capitalleagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CapitalLeagueList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_league(self, league_id, **kwargs):  # noqa: E501
        """Get league information  # noqa: E501

        Get league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: League
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_league_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_league_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def get_league_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get league information  # noqa: E501

        Get league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: League
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/leagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='League',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_league_season_rankings(self, league_id, season_id, **kwargs):  # noqa: E501
        """Get league season rankings  # noqa: E501

        Get league season rankings. Note that league season information is available only for Legend League.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_season_rankings(league_id, season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :param str season_id: Identifier of the season. (required)
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: PlayerRankingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_league_season_rankings_with_http_info(league_id, season_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_league_season_rankings_with_http_info(league_id, season_id, **kwargs)  # noqa: E501
            return data

    def get_league_season_rankings_with_http_info(self, league_id, season_id, **kwargs):  # noqa: E501
        """Get league season rankings  # noqa: E501

        Get league season rankings. Note that league season information is available only for Legend League.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_season_rankings_with_http_info(league_id, season_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :param str season_id: Identifier of the season. (required)
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: PlayerRankingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'season_id', 'limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_league_season_rankings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_league_season_rankings`")  # noqa: E501
        # verify the required parameter 'season_id' is set
        if ('season_id' not in params or
                params['season_id'] is None):
            raise ValueError("Missing the required parameter `season_id` when calling `get_league_season_rankings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'season_id' in params:
            path_params['seasonId'] = params['season_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/leagues/{leagueId}/seasons/{seasonId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlayerRankingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_league_seasons(self, league_id, **kwargs):  # noqa: E501
        """Get league seasons  # noqa: E501

        Get league seasons. Note that league season information is available only for Legend League.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_seasons(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: LeagueSeasonList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_league_seasons_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_league_seasons_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def get_league_seasons_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get league seasons  # noqa: E501

        Get league seasons. Note that league season information is available only for Legend League.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_league_seasons_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: LeagueSeasonList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_league_seasons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_league_seasons`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/leagues/{leagueId}/seasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueSeasonList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leagues(self, **kwargs):  # noqa: E501
        """List leagues  # noqa: E501

        List leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: LeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leagues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_leagues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_leagues_with_http_info(self, **kwargs):  # noqa: E501
        """List leagues  # noqa: E501

        List leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: LeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leagues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/leagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_war_league(self, league_id, **kwargs):  # noqa: E501
        """Get war league information  # noqa: E501

        Get war league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_league(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: WarLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_war_league_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_war_league_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def get_war_league_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get war league information  # noqa: E501

        Get war league information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_league_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: Identifier of the league. (required)
        :return: WarLeague
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_war_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `get_war_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/warleagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WarLeague',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_war_leagues(self, **kwargs):  # noqa: E501
        """List war leagues  # noqa: E501

        List war leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_leagues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: WarLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_war_leagues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_war_leagues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_war_leagues_with_http_info(self, **kwargs):  # noqa: E501
        """List war leagues  # noqa: E501

        List war leagues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_leagues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Limit the number of items returned in the response.
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :return: WarLeagueList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_war_leagues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/warleagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WarLeagueList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
