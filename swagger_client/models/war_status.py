# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WarStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'int',
        'clan_tag': 'str',
        'enemy_clan_tag': 'str',
        'war_state': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'status_code': 'statusCode',
        'clan_tag': 'clanTag',
        'enemy_clan_tag': 'enemyClanTag',
        'war_state': 'warState',
        'timestamp': 'timestamp'
    }

    def __init__(self, status_code=None, clan_tag=None, enemy_clan_tag=None, war_state=None, timestamp=None):  # noqa: E501
        """WarStatus - a model defined in Swagger"""  # noqa: E501
        self._status_code = None
        self._clan_tag = None
        self._enemy_clan_tag = None
        self._war_state = None
        self._timestamp = None
        self.discriminator = None
        if status_code is not None:
            self.status_code = status_code
        if clan_tag is not None:
            self.clan_tag = clan_tag
        if enemy_clan_tag is not None:
            self.enemy_clan_tag = enemy_clan_tag
        if war_state is not None:
            self.war_state = war_state
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def status_code(self):
        """Gets the status_code of this WarStatus.  # noqa: E501


        :return: The status_code of this WarStatus.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WarStatus.


        :param status_code: The status_code of this WarStatus.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def clan_tag(self):
        """Gets the clan_tag of this WarStatus.  # noqa: E501


        :return: The clan_tag of this WarStatus.  # noqa: E501
        :rtype: str
        """
        return self._clan_tag

    @clan_tag.setter
    def clan_tag(self, clan_tag):
        """Sets the clan_tag of this WarStatus.


        :param clan_tag: The clan_tag of this WarStatus.  # noqa: E501
        :type: str
        """

        self._clan_tag = clan_tag

    @property
    def enemy_clan_tag(self):
        """Gets the enemy_clan_tag of this WarStatus.  # noqa: E501


        :return: The enemy_clan_tag of this WarStatus.  # noqa: E501
        :rtype: str
        """
        return self._enemy_clan_tag

    @enemy_clan_tag.setter
    def enemy_clan_tag(self, enemy_clan_tag):
        """Sets the enemy_clan_tag of this WarStatus.


        :param enemy_clan_tag: The enemy_clan_tag of this WarStatus.  # noqa: E501
        :type: str
        """

        self._enemy_clan_tag = enemy_clan_tag

    @property
    def war_state(self):
        """Gets the war_state of this WarStatus.  # noqa: E501


        :return: The war_state of this WarStatus.  # noqa: E501
        :rtype: str
        """
        return self._war_state

    @war_state.setter
    def war_state(self, war_state):
        """Sets the war_state of this WarStatus.


        :param war_state: The war_state of this WarStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLAN_NOT_FOUND", "ACCESS_DENIED", "NOT_IN_WAR", "IN_MATCHMAKING", "ENTER_WAR", "MATCHED", "PREPARATION", "WAR", "IN_WAR", "ENDED"]  # noqa: E501
        if war_state not in allowed_values:
            raise ValueError(
                "Invalid value for `war_state` ({0}), must be one of {1}"  # noqa: E501
                .format(war_state, allowed_values)
            )

        self._war_state = war_state

    @property
    def timestamp(self):
        """Gets the timestamp of this WarStatus.  # noqa: E501


        :return: The timestamp of this WarStatus.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WarStatus.


        :param timestamp: The timestamp of this WarStatus.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
