# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'major': 'int',
        'minor': 'int',
        'content': 'int'
    }

    attribute_map = {
        'major': 'major',
        'minor': 'minor',
        'content': 'content'
    }

    def __init__(self, major=None, minor=None, content=None):  # noqa: E501
        """ServiceVersion - a model defined in Swagger"""  # noqa: E501
        self._major = None
        self._minor = None
        self._content = None
        self.discriminator = None
        if major is not None:
            self.major = major
        if minor is not None:
            self.minor = minor
        if content is not None:
            self.content = content

    @property
    def major(self):
        """Gets the major of this ServiceVersion.  # noqa: E501


        :return: The major of this ServiceVersion.  # noqa: E501
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this ServiceVersion.


        :param major: The major of this ServiceVersion.  # noqa: E501
        :type: int
        """

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this ServiceVersion.  # noqa: E501


        :return: The minor of this ServiceVersion.  # noqa: E501
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this ServiceVersion.


        :param minor: The minor of this ServiceVersion.  # noqa: E501
        :type: int
        """

        self._minor = minor

    @property
    def content(self):
        """Gets the content of this ServiceVersion.  # noqa: E501


        :return: The content of this ServiceVersion.  # noqa: E501
        :rtype: int
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ServiceVersion.


        :param content: The content of this ServiceVersion.  # noqa: E501
        :type: int
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
