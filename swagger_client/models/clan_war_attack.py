# coding: utf-8

"""
    Clash of Clans API

    Clash of Clans API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClanWarAttack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attacker_tag': 'str',
        'defender_tag': 'str',
        'destruction_percentage': 'int',
        'duration': 'int',
        'order': 'int',
        'stars': 'int'
    }

    attribute_map = {
        'attacker_tag': 'attackerTag',
        'defender_tag': 'defenderTag',
        'destruction_percentage': 'destructionPercentage',
        'duration': 'duration',
        'order': 'order',
        'stars': 'stars'
    }

    def __init__(self, attacker_tag=None, defender_tag=None, destruction_percentage=None, duration=None, order=None, stars=None):  # noqa: E501
        """ClanWarAttack - a model defined in Swagger"""  # noqa: E501
        self._attacker_tag = None
        self._defender_tag = None
        self._destruction_percentage = None
        self._duration = None
        self._order = None
        self._stars = None
        self.discriminator = None
        if attacker_tag is not None:
            self.attacker_tag = attacker_tag
        if defender_tag is not None:
            self.defender_tag = defender_tag
        if destruction_percentage is not None:
            self.destruction_percentage = destruction_percentage
        if duration is not None:
            self.duration = duration
        if order is not None:
            self.order = order
        if stars is not None:
            self.stars = stars

    @property
    def attacker_tag(self):
        """Gets the attacker_tag of this ClanWarAttack.  # noqa: E501


        :return: The attacker_tag of this ClanWarAttack.  # noqa: E501
        :rtype: str
        """
        return self._attacker_tag

    @attacker_tag.setter
    def attacker_tag(self, attacker_tag):
        """Sets the attacker_tag of this ClanWarAttack.


        :param attacker_tag: The attacker_tag of this ClanWarAttack.  # noqa: E501
        :type: str
        """

        self._attacker_tag = attacker_tag

    @property
    def defender_tag(self):
        """Gets the defender_tag of this ClanWarAttack.  # noqa: E501


        :return: The defender_tag of this ClanWarAttack.  # noqa: E501
        :rtype: str
        """
        return self._defender_tag

    @defender_tag.setter
    def defender_tag(self, defender_tag):
        """Sets the defender_tag of this ClanWarAttack.


        :param defender_tag: The defender_tag of this ClanWarAttack.  # noqa: E501
        :type: str
        """

        self._defender_tag = defender_tag

    @property
    def destruction_percentage(self):
        """Gets the destruction_percentage of this ClanWarAttack.  # noqa: E501


        :return: The destruction_percentage of this ClanWarAttack.  # noqa: E501
        :rtype: int
        """
        return self._destruction_percentage

    @destruction_percentage.setter
    def destruction_percentage(self, destruction_percentage):
        """Sets the destruction_percentage of this ClanWarAttack.


        :param destruction_percentage: The destruction_percentage of this ClanWarAttack.  # noqa: E501
        :type: int
        """

        self._destruction_percentage = destruction_percentage

    @property
    def duration(self):
        """Gets the duration of this ClanWarAttack.  # noqa: E501


        :return: The duration of this ClanWarAttack.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ClanWarAttack.


        :param duration: The duration of this ClanWarAttack.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def order(self):
        """Gets the order of this ClanWarAttack.  # noqa: E501


        :return: The order of this ClanWarAttack.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ClanWarAttack.


        :param order: The order of this ClanWarAttack.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def stars(self):
        """Gets the stars of this ClanWarAttack.  # noqa: E501


        :return: The stars of this ClanWarAttack.  # noqa: E501
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this ClanWarAttack.


        :param stars: The stars of this ClanWarAttack.  # noqa: E501
        :type: int
        """

        self._stars = stars

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClanWarAttack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClanWarAttack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
