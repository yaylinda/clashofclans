# coding: utf-8

"""
    Clash of Clans API

    Clash of Clans API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClanWarLeagueGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clans': 'ClanWarLeagueClanList',
        'rounds': 'ClanWarLeagueRoundList',
        'season': 'str',
        'state': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'clans': 'clans',
        'rounds': 'rounds',
        'season': 'season',
        'state': 'state',
        'tag': 'tag'
    }

    def __init__(self, clans=None, rounds=None, season=None, state=None, tag=None):  # noqa: E501
        """ClanWarLeagueGroup - a model defined in Swagger"""  # noqa: E501
        self._clans = None
        self._rounds = None
        self._season = None
        self._state = None
        self._tag = None
        self.discriminator = None
        if clans is not None:
            self.clans = clans
        if rounds is not None:
            self.rounds = rounds
        if season is not None:
            self.season = season
        if state is not None:
            self.state = state
        if tag is not None:
            self.tag = tag

    @property
    def clans(self):
        """Gets the clans of this ClanWarLeagueGroup.  # noqa: E501


        :return: The clans of this ClanWarLeagueGroup.  # noqa: E501
        :rtype: ClanWarLeagueClanList
        """
        return self._clans

    @clans.setter
    def clans(self, clans):
        """Sets the clans of this ClanWarLeagueGroup.


        :param clans: The clans of this ClanWarLeagueGroup.  # noqa: E501
        :type: ClanWarLeagueClanList
        """

        self._clans = clans

    @property
    def rounds(self):
        """Gets the rounds of this ClanWarLeagueGroup.  # noqa: E501


        :return: The rounds of this ClanWarLeagueGroup.  # noqa: E501
        :rtype: ClanWarLeagueRoundList
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this ClanWarLeagueGroup.


        :param rounds: The rounds of this ClanWarLeagueGroup.  # noqa: E501
        :type: ClanWarLeagueRoundList
        """

        self._rounds = rounds

    @property
    def season(self):
        """Gets the season of this ClanWarLeagueGroup.  # noqa: E501


        :return: The season of this ClanWarLeagueGroup.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ClanWarLeagueGroup.


        :param season: The season of this ClanWarLeagueGroup.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def state(self):
        """Gets the state of this ClanWarLeagueGroup.  # noqa: E501


        :return: The state of this ClanWarLeagueGroup.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClanWarLeagueGroup.


        :param state: The state of this ClanWarLeagueGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["groupNotFound", "notInWar", "preparation", "war", "ended"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tag(self):
        """Gets the tag of this ClanWarLeagueGroup.  # noqa: E501


        :return: The tag of this ClanWarLeagueGroup.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ClanWarLeagueGroup.


        :param tag: The tag of this ClanWarLeagueGroup.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClanWarLeagueGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClanWarLeagueGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
