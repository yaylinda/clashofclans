# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClanCapitalRaidSeasonMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'name': 'str',
        'attacks': 'int',
        'attack_limit': 'int',
        'bonus_attack_limit': 'int',
        'capital_resources_looted': 'int'
    }

    attribute_map = {
        'tag': 'tag',
        'name': 'name',
        'attacks': 'attacks',
        'attack_limit': 'attackLimit',
        'bonus_attack_limit': 'bonusAttackLimit',
        'capital_resources_looted': 'capitalResourcesLooted'
    }

    def __init__(self, tag=None, name=None, attacks=None, attack_limit=None, bonus_attack_limit=None, capital_resources_looted=None):  # noqa: E501
        """ClanCapitalRaidSeasonMember - a model defined in Swagger"""  # noqa: E501
        self._tag = None
        self._name = None
        self._attacks = None
        self._attack_limit = None
        self._bonus_attack_limit = None
        self._capital_resources_looted = None
        self.discriminator = None
        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if attacks is not None:
            self.attacks = attacks
        if attack_limit is not None:
            self.attack_limit = attack_limit
        if bonus_attack_limit is not None:
            self.bonus_attack_limit = bonus_attack_limit
        if capital_resources_looted is not None:
            self.capital_resources_looted = capital_resources_looted

    @property
    def tag(self):
        """Gets the tag of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The tag of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ClanCapitalRaidSeasonMember.


        :param tag: The tag of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The name of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClanCapitalRaidSeasonMember.


        :param name: The name of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def attacks(self):
        """Gets the attacks of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The attacks of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: int
        """
        return self._attacks

    @attacks.setter
    def attacks(self, attacks):
        """Sets the attacks of this ClanCapitalRaidSeasonMember.


        :param attacks: The attacks of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: int
        """

        self._attacks = attacks

    @property
    def attack_limit(self):
        """Gets the attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: int
        """
        return self._attack_limit

    @attack_limit.setter
    def attack_limit(self, attack_limit):
        """Sets the attack_limit of this ClanCapitalRaidSeasonMember.


        :param attack_limit: The attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: int
        """

        self._attack_limit = attack_limit

    @property
    def bonus_attack_limit(self):
        """Gets the bonus_attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The bonus_attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: int
        """
        return self._bonus_attack_limit

    @bonus_attack_limit.setter
    def bonus_attack_limit(self, bonus_attack_limit):
        """Sets the bonus_attack_limit of this ClanCapitalRaidSeasonMember.


        :param bonus_attack_limit: The bonus_attack_limit of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: int
        """

        self._bonus_attack_limit = bonus_attack_limit

    @property
    def capital_resources_looted(self):
        """Gets the capital_resources_looted of this ClanCapitalRaidSeasonMember.  # noqa: E501


        :return: The capital_resources_looted of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :rtype: int
        """
        return self._capital_resources_looted

    @capital_resources_looted.setter
    def capital_resources_looted(self, capital_resources_looted):
        """Sets the capital_resources_looted of this ClanCapitalRaidSeasonMember.


        :param capital_resources_looted: The capital_resources_looted of this ClanCapitalRaidSeasonMember.  # noqa: E501
        :type: int
        """

        self._capital_resources_looted = capital_resources_looted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClanCapitalRaidSeasonMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClanCapitalRaidSeasonMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
