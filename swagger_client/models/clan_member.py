# coding: utf-8

"""
    Clash of Clans API

    Clash of Clans API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClanMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'builder_base_league': 'BuilderBaseLeague',
        'builder_base_trophies': 'int',
        'clan_rank': 'int',
        'donations': 'int',
        'donations_received': 'int',
        'exp_level': 'int',
        'league': 'League',
        'name': 'str',
        'player_house': 'PlayerHouse',
        'previous_clan_rank': 'int',
        'role': 'str',
        'tag': 'str',
        'town_hall_level': 'int',
        'trophies': 'int'
    }

    attribute_map = {
        'builder_base_league': 'builderBaseLeague',
        'builder_base_trophies': 'builderBaseTrophies',
        'clan_rank': 'clanRank',
        'donations': 'donations',
        'donations_received': 'donationsReceived',
        'exp_level': 'expLevel',
        'league': 'league',
        'name': 'name',
        'player_house': 'playerHouse',
        'previous_clan_rank': 'previousClanRank',
        'role': 'role',
        'tag': 'tag',
        'town_hall_level': 'townHallLevel',
        'trophies': 'trophies'
    }

    def __init__(self, builder_base_league=None, builder_base_trophies=None, clan_rank=None, donations=None, donations_received=None, exp_level=None, league=None, name=None, player_house=None, previous_clan_rank=None, role=None, tag=None, town_hall_level=None, trophies=None):  # noqa: E501
        """ClanMember - a model defined in Swagger"""  # noqa: E501
        self._builder_base_league = None
        self._builder_base_trophies = None
        self._clan_rank = None
        self._donations = None
        self._donations_received = None
        self._exp_level = None
        self._league = None
        self._name = None
        self._player_house = None
        self._previous_clan_rank = None
        self._role = None
        self._tag = None
        self._town_hall_level = None
        self._trophies = None
        self.discriminator = None
        if builder_base_league is not None:
            self.builder_base_league = builder_base_league
        if builder_base_trophies is not None:
            self.builder_base_trophies = builder_base_trophies
        if clan_rank is not None:
            self.clan_rank = clan_rank
        if donations is not None:
            self.donations = donations
        if donations_received is not None:
            self.donations_received = donations_received
        if exp_level is not None:
            self.exp_level = exp_level
        if league is not None:
            self.league = league
        if name is not None:
            self.name = name
        if player_house is not None:
            self.player_house = player_house
        if previous_clan_rank is not None:
            self.previous_clan_rank = previous_clan_rank
        if role is not None:
            self.role = role
        if tag is not None:
            self.tag = tag
        if town_hall_level is not None:
            self.town_hall_level = town_hall_level
        if trophies is not None:
            self.trophies = trophies

    @property
    def builder_base_league(self):
        """Gets the builder_base_league of this ClanMember.  # noqa: E501


        :return: The builder_base_league of this ClanMember.  # noqa: E501
        :rtype: BuilderBaseLeague
        """
        return self._builder_base_league

    @builder_base_league.setter
    def builder_base_league(self, builder_base_league):
        """Sets the builder_base_league of this ClanMember.


        :param builder_base_league: The builder_base_league of this ClanMember.  # noqa: E501
        :type: BuilderBaseLeague
        """

        self._builder_base_league = builder_base_league

    @property
    def builder_base_trophies(self):
        """Gets the builder_base_trophies of this ClanMember.  # noqa: E501


        :return: The builder_base_trophies of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._builder_base_trophies

    @builder_base_trophies.setter
    def builder_base_trophies(self, builder_base_trophies):
        """Sets the builder_base_trophies of this ClanMember.


        :param builder_base_trophies: The builder_base_trophies of this ClanMember.  # noqa: E501
        :type: int
        """

        self._builder_base_trophies = builder_base_trophies

    @property
    def clan_rank(self):
        """Gets the clan_rank of this ClanMember.  # noqa: E501


        :return: The clan_rank of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._clan_rank

    @clan_rank.setter
    def clan_rank(self, clan_rank):
        """Sets the clan_rank of this ClanMember.


        :param clan_rank: The clan_rank of this ClanMember.  # noqa: E501
        :type: int
        """

        self._clan_rank = clan_rank

    @property
    def donations(self):
        """Gets the donations of this ClanMember.  # noqa: E501


        :return: The donations of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._donations

    @donations.setter
    def donations(self, donations):
        """Sets the donations of this ClanMember.


        :param donations: The donations of this ClanMember.  # noqa: E501
        :type: int
        """

        self._donations = donations

    @property
    def donations_received(self):
        """Gets the donations_received of this ClanMember.  # noqa: E501


        :return: The donations_received of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._donations_received

    @donations_received.setter
    def donations_received(self, donations_received):
        """Sets the donations_received of this ClanMember.


        :param donations_received: The donations_received of this ClanMember.  # noqa: E501
        :type: int
        """

        self._donations_received = donations_received

    @property
    def exp_level(self):
        """Gets the exp_level of this ClanMember.  # noqa: E501


        :return: The exp_level of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._exp_level

    @exp_level.setter
    def exp_level(self, exp_level):
        """Sets the exp_level of this ClanMember.


        :param exp_level: The exp_level of this ClanMember.  # noqa: E501
        :type: int
        """

        self._exp_level = exp_level

    @property
    def league(self):
        """Gets the league of this ClanMember.  # noqa: E501


        :return: The league of this ClanMember.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this ClanMember.


        :param league: The league of this ClanMember.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def name(self):
        """Gets the name of this ClanMember.  # noqa: E501


        :return: The name of this ClanMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClanMember.


        :param name: The name of this ClanMember.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def player_house(self):
        """Gets the player_house of this ClanMember.  # noqa: E501


        :return: The player_house of this ClanMember.  # noqa: E501
        :rtype: PlayerHouse
        """
        return self._player_house

    @player_house.setter
    def player_house(self, player_house):
        """Sets the player_house of this ClanMember.


        :param player_house: The player_house of this ClanMember.  # noqa: E501
        :type: PlayerHouse
        """

        self._player_house = player_house

    @property
    def previous_clan_rank(self):
        """Gets the previous_clan_rank of this ClanMember.  # noqa: E501


        :return: The previous_clan_rank of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._previous_clan_rank

    @previous_clan_rank.setter
    def previous_clan_rank(self, previous_clan_rank):
        """Sets the previous_clan_rank of this ClanMember.


        :param previous_clan_rank: The previous_clan_rank of this ClanMember.  # noqa: E501
        :type: int
        """

        self._previous_clan_rank = previous_clan_rank

    @property
    def role(self):
        """Gets the role of this ClanMember.  # noqa: E501


        :return: The role of this ClanMember.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ClanMember.


        :param role: The role of this ClanMember.  # noqa: E501
        :type: str
        """
        allowed_values = ["notMember", "member", "leader", "admin", "coleader"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def tag(self):
        """Gets the tag of this ClanMember.  # noqa: E501


        :return: The tag of this ClanMember.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ClanMember.


        :param tag: The tag of this ClanMember.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def town_hall_level(self):
        """Gets the town_hall_level of this ClanMember.  # noqa: E501


        :return: The town_hall_level of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._town_hall_level

    @town_hall_level.setter
    def town_hall_level(self, town_hall_level):
        """Sets the town_hall_level of this ClanMember.


        :param town_hall_level: The town_hall_level of this ClanMember.  # noqa: E501
        :type: int
        """

        self._town_hall_level = town_hall_level

    @property
    def trophies(self):
        """Gets the trophies of this ClanMember.  # noqa: E501


        :return: The trophies of this ClanMember.  # noqa: E501
        :rtype: int
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this ClanMember.


        :param trophies: The trophies of this ClanMember.  # noqa: E501
        :type: int
        """

        self._trophies = trophies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClanMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClanMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
