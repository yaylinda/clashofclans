# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WarClan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destruction_percentage': 'ModelFloat',
        'tag': 'str',
        'name': 'str',
        'badge_urls': 'object',
        'clan_level': 'int',
        'attacks': 'int',
        'stars': 'int',
        'exp_earned': 'int',
        'members': 'ClanWarMemberList'
    }

    attribute_map = {
        'destruction_percentage': 'destructionPercentage',
        'tag': 'tag',
        'name': 'name',
        'badge_urls': 'badgeUrls',
        'clan_level': 'clanLevel',
        'attacks': 'attacks',
        'stars': 'stars',
        'exp_earned': 'expEarned',
        'members': 'members'
    }

    def __init__(self, destruction_percentage=None, tag=None, name=None, badge_urls=None, clan_level=None, attacks=None, stars=None, exp_earned=None, members=None):  # noqa: E501
        """WarClan - a model defined in Swagger"""  # noqa: E501
        self._destruction_percentage = None
        self._tag = None
        self._name = None
        self._badge_urls = None
        self._clan_level = None
        self._attacks = None
        self._stars = None
        self._exp_earned = None
        self._members = None
        self.discriminator = None
        if destruction_percentage is not None:
            self.destruction_percentage = destruction_percentage
        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if badge_urls is not None:
            self.badge_urls = badge_urls
        if clan_level is not None:
            self.clan_level = clan_level
        if attacks is not None:
            self.attacks = attacks
        if stars is not None:
            self.stars = stars
        if exp_earned is not None:
            self.exp_earned = exp_earned
        if members is not None:
            self.members = members

    @property
    def destruction_percentage(self):
        """Gets the destruction_percentage of this WarClan.  # noqa: E501


        :return: The destruction_percentage of this WarClan.  # noqa: E501
        :rtype: ModelFloat
        """
        return self._destruction_percentage

    @destruction_percentage.setter
    def destruction_percentage(self, destruction_percentage):
        """Sets the destruction_percentage of this WarClan.


        :param destruction_percentage: The destruction_percentage of this WarClan.  # noqa: E501
        :type: ModelFloat
        """

        self._destruction_percentage = destruction_percentage

    @property
    def tag(self):
        """Gets the tag of this WarClan.  # noqa: E501


        :return: The tag of this WarClan.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this WarClan.


        :param tag: The tag of this WarClan.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this WarClan.  # noqa: E501


        :return: The name of this WarClan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WarClan.


        :param name: The name of this WarClan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def badge_urls(self):
        """Gets the badge_urls of this WarClan.  # noqa: E501


        :return: The badge_urls of this WarClan.  # noqa: E501
        :rtype: object
        """
        return self._badge_urls

    @badge_urls.setter
    def badge_urls(self, badge_urls):
        """Sets the badge_urls of this WarClan.


        :param badge_urls: The badge_urls of this WarClan.  # noqa: E501
        :type: object
        """

        self._badge_urls = badge_urls

    @property
    def clan_level(self):
        """Gets the clan_level of this WarClan.  # noqa: E501


        :return: The clan_level of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._clan_level

    @clan_level.setter
    def clan_level(self, clan_level):
        """Sets the clan_level of this WarClan.


        :param clan_level: The clan_level of this WarClan.  # noqa: E501
        :type: int
        """

        self._clan_level = clan_level

    @property
    def attacks(self):
        """Gets the attacks of this WarClan.  # noqa: E501


        :return: The attacks of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._attacks

    @attacks.setter
    def attacks(self, attacks):
        """Sets the attacks of this WarClan.


        :param attacks: The attacks of this WarClan.  # noqa: E501
        :type: int
        """

        self._attacks = attacks

    @property
    def stars(self):
        """Gets the stars of this WarClan.  # noqa: E501


        :return: The stars of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this WarClan.


        :param stars: The stars of this WarClan.  # noqa: E501
        :type: int
        """

        self._stars = stars

    @property
    def exp_earned(self):
        """Gets the exp_earned of this WarClan.  # noqa: E501


        :return: The exp_earned of this WarClan.  # noqa: E501
        :rtype: int
        """
        return self._exp_earned

    @exp_earned.setter
    def exp_earned(self, exp_earned):
        """Sets the exp_earned of this WarClan.


        :param exp_earned: The exp_earned of this WarClan.  # noqa: E501
        :type: int
        """

        self._exp_earned = exp_earned

    @property
    def members(self):
        """Gets the members of this WarClan.  # noqa: E501


        :return: The members of this WarClan.  # noqa: E501
        :rtype: ClanWarMemberList
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this WarClan.


        :param members: The members of this WarClan.  # noqa: E501
        :type: ClanWarMemberList
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarClan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarClan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
