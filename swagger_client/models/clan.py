# coding: utf-8

"""
    Clash of Clans API

    Clash of Clans API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Clan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'badge_urls': 'object',
        'capital_league': 'CapitalLeague',
        'chat_language': 'Language',
        'clan_builder_base_points': 'int',
        'clan_capital': 'ClanCapital',
        'clan_capital_points': 'int',
        'clan_level': 'int',
        'clan_points': 'int',
        'description': 'str',
        'is_family_friendly': 'bool',
        'is_war_log_public': 'bool',
        'labels': 'LabelList',
        'location': 'Location',
        'member_list': 'ClanMemberList',
        'members': 'int',
        'name': 'str',
        'required_builder_base_trophies': 'int',
        'required_townhall_level': 'int',
        'required_trophies': 'int',
        'tag': 'str',
        'type': 'str',
        'war_frequency': 'str',
        'war_league': 'WarLeague',
        'war_losses': 'int',
        'war_ties': 'int',
        'war_win_streak': 'int',
        'war_wins': 'int'
    }

    attribute_map = {
        'badge_urls': 'badgeUrls',
        'capital_league': 'capitalLeague',
        'chat_language': 'chatLanguage',
        'clan_builder_base_points': 'clanBuilderBasePoints',
        'clan_capital': 'clanCapital',
        'clan_capital_points': 'clanCapitalPoints',
        'clan_level': 'clanLevel',
        'clan_points': 'clanPoints',
        'description': 'description',
        'is_family_friendly': 'isFamilyFriendly',
        'is_war_log_public': 'isWarLogPublic',
        'labels': 'labels',
        'location': 'location',
        'member_list': 'memberList',
        'members': 'members',
        'name': 'name',
        'required_builder_base_trophies': 'requiredBuilderBaseTrophies',
        'required_townhall_level': 'requiredTownhallLevel',
        'required_trophies': 'requiredTrophies',
        'tag': 'tag',
        'type': 'type',
        'war_frequency': 'warFrequency',
        'war_league': 'warLeague',
        'war_losses': 'warLosses',
        'war_ties': 'warTies',
        'war_win_streak': 'warWinStreak',
        'war_wins': 'warWins'
    }

    def __init__(self, badge_urls=None, capital_league=None, chat_language=None, clan_builder_base_points=None, clan_capital=None, clan_capital_points=None, clan_level=None, clan_points=None, description=None, is_family_friendly=None, is_war_log_public=None, labels=None, location=None, member_list=None, members=None, name=None, required_builder_base_trophies=None, required_townhall_level=None, required_trophies=None, tag=None, type=None, war_frequency=None, war_league=None, war_losses=None, war_ties=None, war_win_streak=None, war_wins=None):  # noqa: E501
        """Clan - a model defined in Swagger"""  # noqa: E501
        self._badge_urls = None
        self._capital_league = None
        self._chat_language = None
        self._clan_builder_base_points = None
        self._clan_capital = None
        self._clan_capital_points = None
        self._clan_level = None
        self._clan_points = None
        self._description = None
        self._is_family_friendly = None
        self._is_war_log_public = None
        self._labels = None
        self._location = None
        self._member_list = None
        self._members = None
        self._name = None
        self._required_builder_base_trophies = None
        self._required_townhall_level = None
        self._required_trophies = None
        self._tag = None
        self._type = None
        self._war_frequency = None
        self._war_league = None
        self._war_losses = None
        self._war_ties = None
        self._war_win_streak = None
        self._war_wins = None
        self.discriminator = None
        if badge_urls is not None:
            self.badge_urls = badge_urls
        if capital_league is not None:
            self.capital_league = capital_league
        if chat_language is not None:
            self.chat_language = chat_language
        if clan_builder_base_points is not None:
            self.clan_builder_base_points = clan_builder_base_points
        if clan_capital is not None:
            self.clan_capital = clan_capital
        if clan_capital_points is not None:
            self.clan_capital_points = clan_capital_points
        if clan_level is not None:
            self.clan_level = clan_level
        if clan_points is not None:
            self.clan_points = clan_points
        if description is not None:
            self.description = description
        if is_family_friendly is not None:
            self.is_family_friendly = is_family_friendly
        if is_war_log_public is not None:
            self.is_war_log_public = is_war_log_public
        if labels is not None:
            self.labels = labels
        if location is not None:
            self.location = location
        if member_list is not None:
            self.member_list = member_list
        if members is not None:
            self.members = members
        if name is not None:
            self.name = name
        if required_builder_base_trophies is not None:
            self.required_builder_base_trophies = required_builder_base_trophies
        if required_townhall_level is not None:
            self.required_townhall_level = required_townhall_level
        if required_trophies is not None:
            self.required_trophies = required_trophies
        if tag is not None:
            self.tag = tag
        if type is not None:
            self.type = type
        if war_frequency is not None:
            self.war_frequency = war_frequency
        if war_league is not None:
            self.war_league = war_league
        if war_losses is not None:
            self.war_losses = war_losses
        if war_ties is not None:
            self.war_ties = war_ties
        if war_win_streak is not None:
            self.war_win_streak = war_win_streak
        if war_wins is not None:
            self.war_wins = war_wins

    @property
    def badge_urls(self):
        """Gets the badge_urls of this Clan.  # noqa: E501


        :return: The badge_urls of this Clan.  # noqa: E501
        :rtype: object
        """
        return self._badge_urls

    @badge_urls.setter
    def badge_urls(self, badge_urls):
        """Sets the badge_urls of this Clan.


        :param badge_urls: The badge_urls of this Clan.  # noqa: E501
        :type: object
        """

        self._badge_urls = badge_urls

    @property
    def capital_league(self):
        """Gets the capital_league of this Clan.  # noqa: E501


        :return: The capital_league of this Clan.  # noqa: E501
        :rtype: CapitalLeague
        """
        return self._capital_league

    @capital_league.setter
    def capital_league(self, capital_league):
        """Sets the capital_league of this Clan.


        :param capital_league: The capital_league of this Clan.  # noqa: E501
        :type: CapitalLeague
        """

        self._capital_league = capital_league

    @property
    def chat_language(self):
        """Gets the chat_language of this Clan.  # noqa: E501


        :return: The chat_language of this Clan.  # noqa: E501
        :rtype: Language
        """
        return self._chat_language

    @chat_language.setter
    def chat_language(self, chat_language):
        """Sets the chat_language of this Clan.


        :param chat_language: The chat_language of this Clan.  # noqa: E501
        :type: Language
        """

        self._chat_language = chat_language

    @property
    def clan_builder_base_points(self):
        """Gets the clan_builder_base_points of this Clan.  # noqa: E501


        :return: The clan_builder_base_points of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._clan_builder_base_points

    @clan_builder_base_points.setter
    def clan_builder_base_points(self, clan_builder_base_points):
        """Sets the clan_builder_base_points of this Clan.


        :param clan_builder_base_points: The clan_builder_base_points of this Clan.  # noqa: E501
        :type: int
        """

        self._clan_builder_base_points = clan_builder_base_points

    @property
    def clan_capital(self):
        """Gets the clan_capital of this Clan.  # noqa: E501


        :return: The clan_capital of this Clan.  # noqa: E501
        :rtype: ClanCapital
        """
        return self._clan_capital

    @clan_capital.setter
    def clan_capital(self, clan_capital):
        """Sets the clan_capital of this Clan.


        :param clan_capital: The clan_capital of this Clan.  # noqa: E501
        :type: ClanCapital
        """

        self._clan_capital = clan_capital

    @property
    def clan_capital_points(self):
        """Gets the clan_capital_points of this Clan.  # noqa: E501


        :return: The clan_capital_points of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._clan_capital_points

    @clan_capital_points.setter
    def clan_capital_points(self, clan_capital_points):
        """Sets the clan_capital_points of this Clan.


        :param clan_capital_points: The clan_capital_points of this Clan.  # noqa: E501
        :type: int
        """

        self._clan_capital_points = clan_capital_points

    @property
    def clan_level(self):
        """Gets the clan_level of this Clan.  # noqa: E501


        :return: The clan_level of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._clan_level

    @clan_level.setter
    def clan_level(self, clan_level):
        """Sets the clan_level of this Clan.


        :param clan_level: The clan_level of this Clan.  # noqa: E501
        :type: int
        """

        self._clan_level = clan_level

    @property
    def clan_points(self):
        """Gets the clan_points of this Clan.  # noqa: E501


        :return: The clan_points of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._clan_points

    @clan_points.setter
    def clan_points(self, clan_points):
        """Sets the clan_points of this Clan.


        :param clan_points: The clan_points of this Clan.  # noqa: E501
        :type: int
        """

        self._clan_points = clan_points

    @property
    def description(self):
        """Gets the description of this Clan.  # noqa: E501


        :return: The description of this Clan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Clan.


        :param description: The description of this Clan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_family_friendly(self):
        """Gets the is_family_friendly of this Clan.  # noqa: E501


        :return: The is_family_friendly of this Clan.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_friendly

    @is_family_friendly.setter
    def is_family_friendly(self, is_family_friendly):
        """Sets the is_family_friendly of this Clan.


        :param is_family_friendly: The is_family_friendly of this Clan.  # noqa: E501
        :type: bool
        """

        self._is_family_friendly = is_family_friendly

    @property
    def is_war_log_public(self):
        """Gets the is_war_log_public of this Clan.  # noqa: E501


        :return: The is_war_log_public of this Clan.  # noqa: E501
        :rtype: bool
        """
        return self._is_war_log_public

    @is_war_log_public.setter
    def is_war_log_public(self, is_war_log_public):
        """Sets the is_war_log_public of this Clan.


        :param is_war_log_public: The is_war_log_public of this Clan.  # noqa: E501
        :type: bool
        """

        self._is_war_log_public = is_war_log_public

    @property
    def labels(self):
        """Gets the labels of this Clan.  # noqa: E501


        :return: The labels of this Clan.  # noqa: E501
        :rtype: LabelList
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Clan.


        :param labels: The labels of this Clan.  # noqa: E501
        :type: LabelList
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this Clan.  # noqa: E501


        :return: The location of this Clan.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Clan.


        :param location: The location of this Clan.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def member_list(self):
        """Gets the member_list of this Clan.  # noqa: E501


        :return: The member_list of this Clan.  # noqa: E501
        :rtype: ClanMemberList
        """
        return self._member_list

    @member_list.setter
    def member_list(self, member_list):
        """Sets the member_list of this Clan.


        :param member_list: The member_list of this Clan.  # noqa: E501
        :type: ClanMemberList
        """

        self._member_list = member_list

    @property
    def members(self):
        """Gets the members of this Clan.  # noqa: E501


        :return: The members of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Clan.


        :param members: The members of this Clan.  # noqa: E501
        :type: int
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Clan.  # noqa: E501


        :return: The name of this Clan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Clan.


        :param name: The name of this Clan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required_builder_base_trophies(self):
        """Gets the required_builder_base_trophies of this Clan.  # noqa: E501


        :return: The required_builder_base_trophies of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._required_builder_base_trophies

    @required_builder_base_trophies.setter
    def required_builder_base_trophies(self, required_builder_base_trophies):
        """Sets the required_builder_base_trophies of this Clan.


        :param required_builder_base_trophies: The required_builder_base_trophies of this Clan.  # noqa: E501
        :type: int
        """

        self._required_builder_base_trophies = required_builder_base_trophies

    @property
    def required_townhall_level(self):
        """Gets the required_townhall_level of this Clan.  # noqa: E501


        :return: The required_townhall_level of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._required_townhall_level

    @required_townhall_level.setter
    def required_townhall_level(self, required_townhall_level):
        """Sets the required_townhall_level of this Clan.


        :param required_townhall_level: The required_townhall_level of this Clan.  # noqa: E501
        :type: int
        """

        self._required_townhall_level = required_townhall_level

    @property
    def required_trophies(self):
        """Gets the required_trophies of this Clan.  # noqa: E501


        :return: The required_trophies of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._required_trophies

    @required_trophies.setter
    def required_trophies(self, required_trophies):
        """Sets the required_trophies of this Clan.


        :param required_trophies: The required_trophies of this Clan.  # noqa: E501
        :type: int
        """

        self._required_trophies = required_trophies

    @property
    def tag(self):
        """Gets the tag of this Clan.  # noqa: E501


        :return: The tag of this Clan.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Clan.


        :param tag: The tag of this Clan.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this Clan.  # noqa: E501


        :return: The type of this Clan.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Clan.


        :param type: The type of this Clan.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "inviteOnly", "closed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def war_frequency(self):
        """Gets the war_frequency of this Clan.  # noqa: E501


        :return: The war_frequency of this Clan.  # noqa: E501
        :rtype: str
        """
        return self._war_frequency

    @war_frequency.setter
    def war_frequency(self, war_frequency):
        """Sets the war_frequency of this Clan.


        :param war_frequency: The war_frequency of this Clan.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "always", "moreThanOncePerWeek", "oncePerWeek", "lessThanOncePerWeek", "never", "any"]  # noqa: E501
        if war_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `war_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(war_frequency, allowed_values)
            )

        self._war_frequency = war_frequency

    @property
    def war_league(self):
        """Gets the war_league of this Clan.  # noqa: E501


        :return: The war_league of this Clan.  # noqa: E501
        :rtype: WarLeague
        """
        return self._war_league

    @war_league.setter
    def war_league(self, war_league):
        """Sets the war_league of this Clan.


        :param war_league: The war_league of this Clan.  # noqa: E501
        :type: WarLeague
        """

        self._war_league = war_league

    @property
    def war_losses(self):
        """Gets the war_losses of this Clan.  # noqa: E501


        :return: The war_losses of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._war_losses

    @war_losses.setter
    def war_losses(self, war_losses):
        """Sets the war_losses of this Clan.


        :param war_losses: The war_losses of this Clan.  # noqa: E501
        :type: int
        """

        self._war_losses = war_losses

    @property
    def war_ties(self):
        """Gets the war_ties of this Clan.  # noqa: E501


        :return: The war_ties of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._war_ties

    @war_ties.setter
    def war_ties(self, war_ties):
        """Sets the war_ties of this Clan.


        :param war_ties: The war_ties of this Clan.  # noqa: E501
        :type: int
        """

        self._war_ties = war_ties

    @property
    def war_win_streak(self):
        """Gets the war_win_streak of this Clan.  # noqa: E501


        :return: The war_win_streak of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._war_win_streak

    @war_win_streak.setter
    def war_win_streak(self, war_win_streak):
        """Sets the war_win_streak of this Clan.


        :param war_win_streak: The war_win_streak of this Clan.  # noqa: E501
        :type: int
        """

        self._war_win_streak = war_win_streak

    @property
    def war_wins(self):
        """Gets the war_wins of this Clan.  # noqa: E501


        :return: The war_wins of this Clan.  # noqa: E501
        :rtype: int
        """
        return self._war_wins

    @war_wins.setter
    def war_wins(self, war_wins):
        """Sets the war_wins of this Clan.


        :param war_wins: The war_wins of this Clan.  # noqa: E501
        :type: int
        """

        self._war_wins = war_wins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Clan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Clan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
