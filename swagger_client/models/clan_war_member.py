# coding: utf-8

"""
    Clash of Clans API

    Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\".   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClanWarMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'name': 'str',
        'map_position': 'int',
        'townhall_level': 'int',
        'opponent_attacks': 'int',
        'best_opponent_attack': 'ClanWarAttack',
        'attacks': 'ClanWarAttackList'
    }

    attribute_map = {
        'tag': 'tag',
        'name': 'name',
        'map_position': 'mapPosition',
        'townhall_level': 'townhallLevel',
        'opponent_attacks': 'opponentAttacks',
        'best_opponent_attack': 'bestOpponentAttack',
        'attacks': 'attacks'
    }

    def __init__(self, tag=None, name=None, map_position=None, townhall_level=None, opponent_attacks=None, best_opponent_attack=None, attacks=None):  # noqa: E501
        """ClanWarMember - a model defined in Swagger"""  # noqa: E501
        self._tag = None
        self._name = None
        self._map_position = None
        self._townhall_level = None
        self._opponent_attacks = None
        self._best_opponent_attack = None
        self._attacks = None
        self.discriminator = None
        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if map_position is not None:
            self.map_position = map_position
        if townhall_level is not None:
            self.townhall_level = townhall_level
        if opponent_attacks is not None:
            self.opponent_attacks = opponent_attacks
        if best_opponent_attack is not None:
            self.best_opponent_attack = best_opponent_attack
        if attacks is not None:
            self.attacks = attacks

    @property
    def tag(self):
        """Gets the tag of this ClanWarMember.  # noqa: E501


        :return: The tag of this ClanWarMember.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ClanWarMember.


        :param tag: The tag of this ClanWarMember.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this ClanWarMember.  # noqa: E501


        :return: The name of this ClanWarMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClanWarMember.


        :param name: The name of this ClanWarMember.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def map_position(self):
        """Gets the map_position of this ClanWarMember.  # noqa: E501


        :return: The map_position of this ClanWarMember.  # noqa: E501
        :rtype: int
        """
        return self._map_position

    @map_position.setter
    def map_position(self, map_position):
        """Sets the map_position of this ClanWarMember.


        :param map_position: The map_position of this ClanWarMember.  # noqa: E501
        :type: int
        """

        self._map_position = map_position

    @property
    def townhall_level(self):
        """Gets the townhall_level of this ClanWarMember.  # noqa: E501


        :return: The townhall_level of this ClanWarMember.  # noqa: E501
        :rtype: int
        """
        return self._townhall_level

    @townhall_level.setter
    def townhall_level(self, townhall_level):
        """Sets the townhall_level of this ClanWarMember.


        :param townhall_level: The townhall_level of this ClanWarMember.  # noqa: E501
        :type: int
        """

        self._townhall_level = townhall_level

    @property
    def opponent_attacks(self):
        """Gets the opponent_attacks of this ClanWarMember.  # noqa: E501


        :return: The opponent_attacks of this ClanWarMember.  # noqa: E501
        :rtype: int
        """
        return self._opponent_attacks

    @opponent_attacks.setter
    def opponent_attacks(self, opponent_attacks):
        """Sets the opponent_attacks of this ClanWarMember.


        :param opponent_attacks: The opponent_attacks of this ClanWarMember.  # noqa: E501
        :type: int
        """

        self._opponent_attacks = opponent_attacks

    @property
    def best_opponent_attack(self):
        """Gets the best_opponent_attack of this ClanWarMember.  # noqa: E501


        :return: The best_opponent_attack of this ClanWarMember.  # noqa: E501
        :rtype: ClanWarAttack
        """
        return self._best_opponent_attack

    @best_opponent_attack.setter
    def best_opponent_attack(self, best_opponent_attack):
        """Sets the best_opponent_attack of this ClanWarMember.


        :param best_opponent_attack: The best_opponent_attack of this ClanWarMember.  # noqa: E501
        :type: ClanWarAttack
        """

        self._best_opponent_attack = best_opponent_attack

    @property
    def attacks(self):
        """Gets the attacks of this ClanWarMember.  # noqa: E501


        :return: The attacks of this ClanWarMember.  # noqa: E501
        :rtype: ClanWarAttackList
        """
        return self._attacks

    @attacks.setter
    def attacks(self, attacks):
        """Sets the attacks of this ClanWarMember.


        :param attacks: The attacks of this ClanWarMember.  # noqa: E501
        :type: ClanWarAttackList
        """

        self._attacks = attacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClanWarMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClanWarMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
